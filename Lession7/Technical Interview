# Remember for Interview
* clarifying the question
* confirming input
* test cases
* Brainstorming
* Run time Analysis
* coding
* Debugging
* Interview wrap-up
* Time for live practice with pramp
 
# What next?

As you have probably figured out by now, one of the best ways to learn something is to practice it. With interviewing, it’s great that you’ve worked through solutions on your own, but that’s not quite what you need to prepare for an interview. Today you‘ll be able to schedule a live mock interview and be one step closer to a job you love.

https://www.pramp.com/promo/udacity

Pramp is a peer-to-peer mock interview platform for coding interviews, focused on questions regarding algorithms and data structures. It pairs software developers together for a practice interview, based on their background, availability and practicing needs. Pramp automates the whole process and takes care of scheduling, peer matching and interview prep content (i.e. interview questions and answers). A live practice session includes integrated HD video chat, collaborative code and support for 17 different programming languages.

# The best part?

Pramp has partnered with us to offer FREE, UNLIMITED practice interviews along with a streamlined on-boarding experience for Udacity students. We chose to work with Pramp because it felt most aligned with the Udacity community in that it's a safe environment for anyone to practice.

We recommend that you complete at least 3 interviews with Pramp as you prepare for your interview.

Congratulations on making it through the course! Here are some additional resources various Udacity staff members have recommended that you can use to prepare for your technical interviews (in order, with the most recommended at the top of each list):

# Websites:

* https://www.hackerrank.com/(Website and community with programming challeges that you can go through for additional practice.)
* https://projecteuler.net/(This website has a ton of logic problems that you can practice writing coded solutions to.)
* https://www.interviewcake.com/(Practice questions and some tutorials available.)
* http://interactivepython.org/runestone/static/pythonds/index.html(Loads of tutorials on pretty much every topic covered here   and many more, along with Python examples and concept questions.)
* https://www.topcoder.com/(New practice problems every day, and some tech companies use answers to those problems to find new potential hires)
* https://leetcode.com/(Practice problems, mock interviews, and articles about problems.)
* http://bigocheatsheet.com/(Summary of efficiencies for most common algorithms and data structures.)

# Online Courses:
Intro to Algorithms(https://www.udacity.com/course/intro-to-algorithms--cs215) Course on Udacity: The course you just completed is essentially a prerequisite of the Intro to Algorithms course. Intro to Algorithms is largely about graph algorithms—you likely won't need most of them for interviews, but if you're interested in graph algorithms this is a great next step!

# Books
Cracking the Coding Interview by Gayle Laakmann McDowell
Introduction to Algorithms by Charles E. Leiserson, Clifford Stein, Ronald Rivest, and Thomas H. Cormen
Programming Interviews Exposed by John Morgan, Noah Kindler, and Eric Giguere
Algorithms, 4th Edition(http://algs4.cs.princeton.edu/home/) by Robert Sedgewick and Kevin Wayne
Elements of Programming Interviews by Adnan Aziz

# Github Repository (Collections of Problems)
The Coding Interview(https://github.com/mre/the-coding-interview)
HTML5 Boilerplate Interview Questions(https://github.com/h5bp/Front-end-Developer-Interview-Questions)

# Blog Posts
Five Essential Phone Screen Questions(https://sites.google.com/site/steveyegge2/five-essential-phone-screen-questions)
